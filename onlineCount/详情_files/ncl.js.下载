// CodeMirror, copyright (c) by Marijn Haverbeke and others
// Distributed under an MIT license: http://codemirror.net/LICENSE

(function(mod) {
  if (typeof exports == "object" && typeof module == "object") // CommonJS
    mod(require("../../lib/codemirror"));
  else if (typeof define == "function" && define.amd) // AMD
    define(["../../lib/codemirror"], mod);
  else // Plain browser env
    mod(CodeMirror);
})(function(CodeMirror) {
  "use strict";

  function wordRegexp(words) {
    return new RegExp("^((" + words.join(")|(") + "))\\b");
  }

  var wordOperators = wordRegexp(["and", "or", "not", "is"]);
  var commonKeywords = [ "begin", "break", "byte", "character", "continue",
		"create", "defaultapp", "do", "double", "else", "end", "enumeric",
		"external", "False", "file", "float", "function", "getvalues",
		"graphic", "group", "if", "integer", "int64", "list", "load", "local",
		"logical", "long", "new", "_Missing", "Missing", "new", "noparent",
		"numeric", "procedure", "quit", "QUIT", "quit", "record", "return",
		"setvalues", "short", "snumeric", "stop", "string", "then", "True",
		"ubyte", "uint", "uint64", "ulong", "ushort", "while" ];
var commonBuiltins = [ "ndctodata", "nggcog", "floattochar", "shsgc_R42",
		"csc2s", "csa2lx", "dim_pqsort", "mixhum_ptd", "isstring", "tdlnpa",
		"NhlGetClassResources", "ListGetType", "ListSetType", "yiqrgb",
		"nnpntinits", "random_chi", "fbinnumrec", "isdouble", "charactertoint",
		"stringtolong", "vrdv2uvg", "tdez2d", "nnsetp", "create_graphic",
		"eofunc_varimax_jl", "vrdv2uvf", "csa2ls", "lspoly_n_old",
		"eof_varimax", "NhlUpdateWorkstation", "update", "solve_linsys",
		"doubletoint", "tdgrds", "ezfftf", "list_hlus", "getfilevarnames",
		"getfilevartypes", "csa3", "conform_dims", "NhlDestroy", "log", "csa2",
		"sleep", "wrf_interp_3d_z", "exp_tapershC", "csa1", "islong",
		"ListIndex", "set_default_fillvalue", "ezfftb", "random_setallseed",
		"isdim", "isenumeric", "issnumeric", "NhlSetColor", "NhlNewColor",
		"dv2uvg", "generate_2d_array", "sum", "filevlendef", "gc_aangle",
		"gc_dangle", "dv2uvf", "NhlGetNamedColorIndex", "esccv", "ttest",
		"stringtoint", "wmdrft", "nnpntinitd", "csgetp", "NhlIsApp",
		"sparse_matrix_mult", "get_isolines", "uv2sfvpg", "uv2vrdvg",
		"tri_trunC", "tdez1d", "csa2ld", "esccr", "str_sub_str", "uv2sfvpf",
		"uv2vrdvf", "touinteger", "ispan", "variance", "filecompounddef",
		"filechunkdimdef", "set_sphere_radius", "angmom_atm",
		"NhlChangeWorkstation", "toushort", "gc_inout_mask_func", "csa2xs",
		"fbindirread", "fbinrecread", "wrf_ij_to_ll", "csstri",
		"transform_coordinate", "floattoshort", "tdmtri", "dim_stat4", "mask",
		"f2gshv", "nngetaspects", "isnan_ieee", "loadscript",
		"NhlAddAnnotation", "NhlIsWorkstation", "filevarcompressleveldef",
		"getgroupvars", "trop_wmo", "cssetp", "greg2jul", "NhlFrame", "num",
		"sindex_yrmo", "vhseC", "NhlNDCToData", "NhlClassName", "isfilevardim",
		"nggetp", "fluxEddy", "nice_mnmxintvl", "ceil", "NhlAddPrimitive",
		"doubletocharacter", "getfilecompressionlevel", "dim_numrun_n",
		"stringtochar", "mjo_cross_segment", "str_get_sq", "nnpnt", "tostring",
		"stddev", "gc_inout", "vrdv2uvG", "NhlRemovePrimitive", "chartofloat",
		"lapvg", "vrdv2uvF", "ftcurvps", "todouble", "filewritecompound",
		"write_table", "tmr_skewt", "ilapsg", "lapvf", "ftcurv", "dim_avg_wgt",
		"dim_sum_wgt", "lclvl", "dpres_plevel", "NhlDataPolyline", "tosigned",
		"str_sort", "ilapsf", "csa2xd", "dspnt3", "list_procfuncs",
		"chartolong", "generateVarList", "poisson_grid_fill", "dspnt2",
		"stringtocharacter", "ischar", "str_right_strip",
		"tostring_with_format", "ListPush", "ngsetp", "nngetaspectd",
		"inttochar", "isfilevar", "tdline", "isunsigned", "str_join",
		"spcorr_n", "testspan", "student_t", "createfile", "str_squeeze",
		"dv2uvG", "qsort", "dv2uvF", "ftcurvpi", "wmbarbmap", "wmvectmap",
		"pres_sigma", "islogical", "str_capital", "lspoly_old", "wgt_areaave",
		"exit", "get_file_version", "gaus_lobat", "tdttri", "replace_ieeenan",
		"shorttobyte", "dpres_hybrid", "isuint64", "uv2sfvpG", "uv2vrdvG",
		"tdctri", "ftkurvpd", "kron_product", "get_script_prefix_name",
		"eofcov_ts_pcmsg", "eofcor_ts_pcmsg", "gc_onarc", "uv2sfvpF",
		"uv2vrdvF", "gammainc", "getfilegrpnames", "min", "getfiledimsizes",
		"filevardimsizes", "linrood_latwgt", "gc_qarea", "gc_tarea",
		"nngetslopes", "fabs", "chartostring", "gradsg", "uv2dvg",
		"linint2_points", "ismissing", "list_vars", "isfunc", "gradsf",
		"uv2dvf", "get_sphere_radius", "rtest", "sqrt", "stringtointeger",
		"wrf_wps_open_int", "wrf_wps_read_int", "escorc_n", "cosh", "minind",
		"f2gsh", "wmvlbl", "NhlPalGetDefined", "addfilelist", "getenv",
		"runave_n", "undef", "tdotri", "wgt_arearmse", "NhlGetBB",
		"str_get_dq", "wrf_tk", "pres_hybrid_ccm", "wavelet_default",
		"mixed_layer_depth", "cbinwrite", "integertocharacter",
		"filevarchunkdef", "triple2grid", "erf", "fbinread", "abs",
		"dim_stddev", "wrf_wps_read_nml", "sfvp2uvg", "exp_tapersh", "nnpnts",
		"dimsizes", "datatondc", "filevarchunkcachedef", "sfvp2uvf", "csa1xs",
		"csa3x", "dsgrid2s", "dsgrid3s", "list_files", "uv2vr_cfd",
		"uv2dv_cfd", "ilapsG", "potmp_insitu_ocn", "nngetsloped", "wgt_runave",
		"wgt_volave", "doubletolong", "vinth2p_ecmwf_nodes", "eof2data",
		"wrf_td", "ilapsF", "pdfxy_bin", "sinh", "str_split_by_length",
		"dim_standardize_n", "tolong", "ischaracter", "str_index_of_substr",
		"covcorm_xy", "charactertoshort", "csa3s", "dtrend_n",
		"charactertointeger", "printFileVarSummary", "wrf_smooth_2d",
		"wrf_ll_to_ij", "specx_anal", "print_table", "wrf_interp_1d",
		"day_of_year", "ut_calendar", "relhum", "rgba_to_color_index",
		"fbinrecwrite", "fbindirwrite", "cumsum", "vinth2p_nodes",
		"vinth2p_ecmwf", "vintp2p_ecmwf", "ut_inv_calendar", "wgt_arearmse2",
		"unique_string", "NhlDataToNDC", "tan", "rgrid2rcm", "isleapyear",
		"equiv_sample_size", "add_NCL_KML_UnstructGrid", "atan",
		"stringtoshort", "stringtoulong", "stringtoint64", "stringtofloat",
		"str_split_csv", "str_get_cr", "triple2grid2d", "round", "where",
		"setfileoption", "str_get_field", "str_get_cols", "str_match_ind",
		"str_get_comma", "str_get_space", "any", "status_exit", "y_skewt",
		"csa3l", "random_normal", "x_skewt", "wrf_slp", "wrf_dbz", "wrf_eth",
		"wrf_pvo", "wrf_avo", "echo_off", "ListCount", "vinth2p", "tda_skewt",
		"nnpntd", "z2geouv", "wavelet", "paleo_outline", "rgbhsv", "csa1xd",
		"dsgrid2d", "dsgrid3d", "dim_rmsd", "escovc", "chiinv", "rgba2png",
		"toshort", "toulong", "toubyte", "toint64", "tofloat", "dim_stddev_n",
		"str_get_tab", "linrood_wgt", "hsvrgb", "lapsg", "csa2x",
		"dtrend_quadratic_msg_n", "list_filevars", "NhlAddData",
		"longtointeger", "floattobyte", "sprintf", "sprinti", "ListAppend",
		"moc_globe_atl", "lapsf", "taper_n", "tempnam", "integertoshort",
		"touint64", "gaus", "pw_skewt", "wrf_wps_rddata_int", "tdprpt",
		"shgetnp", "dtrend_msg", "uv2dvG", "regcoef", "regCoef", "regline",
		"rdsstoi", "cd_inv_calendar", "color_index_to_rgba", "reshape",
		"integertobyte", "integertochar", "product", "isfilepresent",
		"wrf_latlon_to_ij", "uv2dvF", "csa3d", "overlay", "isdimnamed",
		"csa2s", "svdcov", "area_conserve_remap", "asciiwrite",
		"filevartypeof", "fileopaquedef", "get_wall_time", "natgrid", "runave",
		"ftest", "dim_sum_n", "dim_avg_n", "dim_max_n", "dim_min_n",
		"filevarattdef", "getfilegroups", "dim_num_n", "dim_spi_n", "linint1",
		"linint2", "NhlNDCPolymarker", "doubletoshort", "doubletofloat",
		"lderuvf", "lderuvg", "dim_stat4_n", "dim_rmvmean_n", "esccr_shields",
		"craybinnumrec", "dim_product_n", "dgeevx_lapack", "gc_clkwise",
		"depth_to_pres", "dim_avg_wgt_n", "dim_sum_wgt_n", "grid2triple",
		"sqsort", "chartointeger", "iscoord", "isshort", "isulong", "isint64",
		"isubyte", "isfloat", "str_split", "int2p_n", "days_in_month",
		"dtrend_msg_n", "cdfchi_x", "cdfgam_x", "cdfnor_x", "NhlSetMarker",
		"NhlNewMarker", "gc_pnt2gc", "igradsf", "igradsg", "igradsF",
		"igradsG", "csa2l", "hyi2hyo", "shagc", "tdprpi", "fo2fshv", "wrf_rh",
		"ftcurvd", "ftcurvi", "ftcurvp", "ftcurvs", "ftkurvp", "ftkurvd",
		"inverse_matrix", "doubletochar", "doubletointeger",
		"charactertostring", "getfilevardimsizes", "str_strip", "vr2uvg",
		"smth9", "rand", "dim_sum", "dim_avg", "dim_max", "dim_min", "vr2uvf",
		"drwsrfc", "drwvctc", "drwconc", "pcsetp", "csa1x", "dsgrid2",
		"dsgrid3", "dspnt2s", "dspnt2d", "dspnt3s", "dspnt3d", "dim_num",
		"area_hi2lores", "sigma2hybrid", "cdfbin_s", "echo_on", "destroy",
		"tochar", "charactertolong", "fileenumdef", "rip_cape_3d", "cssgrid",
		"csa2lxs", "csa3lxs", "csa2lxd", "csa3lxd", "covcorm", "cz2ccm",
		"conform", "bsearch", "chngdir", "longtobyte", "f2foshv", "bin_sum",
		"bin_avg", "stat_trim", "dim_rmvmed", "longtochar",
		"NhlGetWorkspaceObjectId", "f2fsh", "wk_smooth121", "simpeq", "hydro",
		"betainc", "cdfbin_p", "cdfgam_p", "cdfnor_p", "cdfchi_p", "addfile",
		"inttocharacter", "wrf_cape_3d", "csa2d", "filwgts_lanczos",
		"NhlRemoveOverlay", "get_script_name", "tdprpa", "csa1s", "esacv",
		"systemfunc", "dim_variance", "gamma", "str_match_ind_ic", "pdfx_bin",
		"dz_height", "draw", "NhlClearWorkstation", "NhlRemoveAnnotation",
		"NhlGetErrorObjectId", "show_ascii", "nnpntinit", "esacr",
		"get_ncl_version", "write_matrix", "NhlIsAllocatedColor",
		"stringtouint", "getNbitsFromUint64", "dsgetp", "pslec", "chartoshort",
		"cape_thermo", "wgt_volave_ccm", "local_max", "NhlGetIsoLines",
		"f2fshv", "pslhor", "prcwater_dp", "cbinread", "eofcov", "tdgtrs",
		"getbitsone", "NhlAddOverlay", "NhlRemoveData", "NhlUpdateData",
		"NhlNDCPolygon", "tointeger", "NhlIsDataComm", "NhlIsDataItem",
		"NhlIsDataSpec", "area_poly_sphere", "gc_inout_mask_proc", "rgbyiq",
		"lapsG", "ctwrap", "fo2fsh", "rip_cape_2d", "lapsF", "rhomb_trunc",
		"cdfbin_pr", "longtoshort", "isfilevarcoord", "onedtond", "isuint",
		"longtoint", "str_get_nl", "eofcor", "nngetwts", "filedimdef",
		"filegrpdef", "filevardef", "fileattdef", "g2gshv", "wrf_cape_2d",
		"wmgetp", "csa1d", "cfftf_frq_reorder", "dssetp", "isint", "NhlDraw",
		"NhlName", "NewList", "linmsg", "idsfft", "ListPop",
		"center_finite_diff_n", "all", "dim_median", "add_NCL_KML_Arrow",
		"isbyte", "isbigendian", "tdstrs", "NhlNDCPolyline", "eofunc_ts",
		"eofcov_ts", "eofcor_ts", "snindex_yrmo", "tdgetp", "eofcov_tr",
		"eofcor_tr", "shaec", "shagC", "monthday", "wrf_wps_rdhead_int",
		"filevardeflateleveldef", "f2fosh", "wrf_interp_2d_xy", "vr2uvG",
		"shsgc", "wmsetp", "stdatmus_p2tdz", "system", "floattocharacter",
		"stringtouinteger", "addfiles", "vr2uvF", "tanh", "taper", "frame",
		"NhlFreeColor", "charactertofloat", "isuinteger", "nnpntend",
		"dewtemp_trh", "NhlIsTransform", "getfilevaratts", "getfilevardims",
		"str_match_ic", "natgrids", "floattointeger", "tdstri", "vibeta",
		"stringtoushort", "spcorr", "wmvect", "ftsurf", "mixhum_ptrh", "toint",
		"str_concat", "tdsetp", "tdsort", "ngezlogo", "css2c", "chartodouble",
		"isnumeric", "isgraphic", "regCoef_n", "str_left_strip", "vhagc",
		"exp_tapersh_wgts", "stdatmus_z2tdp", "fbinwrite", "tounsigned",
		"shorttocharacter", "g2gsh", "tdinit", "NhlGetParentId", "svdcov_sv",
		"svdstd_sv", "mjo_cross_coh2pha", "ptlcl_skewt", "zonal_mpsi",
		"wgt_areaave2", "eofunc_varimax", "chartoint", "escorc",
		"NhlSetDashPattern", "NhlNewDashPattern", "attsetvalues", "wmbarb",
		"rcm2points", "cd_calendar", "isproc", "rhomb_trunC", "NhlDataPolygon",
		"ndtooned", "gaus_lobat_wgt", "natgridd", "wmlabs", "latlon2utm",
		"pop_remap", "filwgts_lancos", "stringtodouble", "default_fillvalue",
		"svdstd", "strlen", "wrf_wetbulb", "uv2vrg", "tdgrid", "dim_rmvmean",
		"uv2vrf", "tdplch", "linint1_n", "shorttointeger", "svdpar", "cancor",
		"lspoly_n", "linmsg_n", "prompt", "str_is_blank", "stat4",
		"filwgts_normal", "floattoint", "wgt_area_smooth", "stat_medrng",
		"stat2", "dim_cumsum_n", "str_upper", "str_lower", "shaeC",
		"pres_hybrid", "pres2hybrid", "directVincenty", "sizeof", "tditri",
		"dim_median_n", "tocharacter", "ind", "shsec", "shsgC", "shgetp",
		"cfftf", "NhlAppGetDefaultParentId", "tdlbls", "typeof", "csa3lx",
		"str_from_int", "pslhyp", "getfilechunksizes", "cfftb", "omega_ccm",
		"fourier_info", "gc_latlon", "srand", "isvar", "shorttoint",
		"wrf_virtual_temp", "csa3ls", "lspoly", "wgt_volrmse_ccm",
		"dtrend_quadratic", "specxy_anal", "print", "exp", "log10",
		"NhlDataPolymarker", "max", "ngritd", "dim_rmsd_n", "generateVarRange",
		"hlsrgb", "kolsm2_n", "ftgetp", "inttobyte", "vhaec", "vhagC",
		"dim_gbits", "cdft_t", "erfc", "shsetp", "wgt_runave_n", "shorttochar",
		"isatt", "wrf_helicity", "vhsgc", "tddtri", "ncargversion",
		"getvardims", "nngetwtsd", "random_uniform", "wrf_omega",
		"dpres_hybrid_ccm", "cdft_p", "dim_product", "NhlIsView",
		"get_cpu_time", "touint", "floattolong", "avg", "center_finite_diff",
		"simpne", "tdlbla", "dim_rmvmed_n", "int2p", "wrf_updraft_helicity",
		"ftsetp", "delete", "eofunc", "wgt_areasum2", "ind_resolve",
		"doubletobyte", "uv2vrG", "ftkurv", "csa3ld", "ushorttoint", "uv2vrF",
		"utm2latlon", "tobyte", "charactertodouble", "wgt_volrmse", "fspan",
		"islist", "dim_variance_n", "printVarSummary", "g2fsh", "wmstnm",
		"shgrid", "obj_anal_ic", "clear", "isinteger",
		"NhlGetParentWorkstation", "csa3xs", "dim_pqsort_n", "wrf_uvmet",
		"tdclrs", "dtrend", "cos", "acos", "floor", "day_of_week",
		"add_NCL_KML_2DGrid", "isfilevaratt", "csvoro", "output_gif", "shseC",
		"jul2greg", "maxind", "inttoshort", "isunlimited", "craybinrecread",
		"isushort", "str_switch", "eofcov_pcmsg", "eofcor_pcmsg", "rgbhls",
		"tri_trunc", "tdez3d", "nglogo", "dim_standardize", "str_insert",
		"reshape_ind", "dim_cumsum", "str_fields_count", "ilapvg", "ncargpath",
		"stringtouint64", "wgt_vert_avg_beta", "ilapvf", "fft2df", "rcm2rgrid",
		"getvaratts", "atan2", "isdefined", "str_match", "nngetp", "isfile",
		"tdcurv", "csa3xd", "random_gamma", "cdfbin_xn", "asciiread", "sin",
		"vhaeC", "tdpara", "nnpntendd", "fft2db", "local_min", "asin",
		"longtocharacter", "svd_lapack", "reg_multlin", "g2fshv",
		"satlft_skewt", "showal_skewt", "vhsec", "vhsgC", "regCoef_shields",
		"dim_gamfit_n", "create_labelbar", "gsn_polyline", "add_KML_Icon",
		"gsn_csm_map", "gsn_csm_streamline_contour_map_ce",
		"gsn_csm_streamline_contour_map_polar", "IntegrateHybrid",
		"wrf_user_intrp2d", "dim_stddev_Wrap", "dim_rmsd_n_Wrap",
		"add_KML_Href", "span_two_named_colors",
		"gsn_csm_streamline_map_other", "fbindirSwap", "date_expand",
		"pot_vort_isobaric", "int2dble", "rcm2points_Wrap", "check_for_file",
		"CloseKML", "gsn_csm_map_polar", "gsn_csm_lat_time", "get_color_index",
		"dv2uvG_Wrap", "dv2uvF_Wrap", "gsn_csm_contour_map_ce",
		"delete_VarAtts", "compute_hist_vals", "changeCaseChar",
		"add_KML_Altitude", "Close_KML_MultiGeometry", "nextcombination",
		"norml2", "ilapsG_Wrap", "ilapsF_Wrap", "Open_KML_MultiGeometry",
		"NegDashLineContour", "is_cairo_ps", "gsn_text_ndc",
		"gsn_panel_return", "Gray2RGBA", "write_debug_res_file",
		"gsn_streamline_map", "getSubString", "add_KML_LineString",
		"Open_KML_NetworkLink", "PopLatLonV2", "fbinseqSwap2",
		"shsgc_R42_Wrap", "quadroots", "ESMF_regrid_with_weights",
		"mjo_spectra", "oneDtostring", "fbinseqSwap1",
		"get_contour_line_thicknesses", "gsn_add_primitive", "GetOverlayPlot",
		"drawNDCGrid", "fix_zero_contour", "gsn_streamline_scalar",
		"smthClmDayTLLL", "WindRoseBasicF", "WindRoseColorF",
		"wrf_user_ll_to_ij", "gsn_csm_streamline_contour_map", "mirrorP2P",
		"band_pass_latlon_time", "gsn_csm_streamline_contour_map_other",
		"g2gsh_Wrap", "g2fsh_Wrap", "int2p_n_Wrap", "add_KML_GOverlay",
		"pdfxy_plt", "ShadeLeGeContourDensity", "gsn_open_wks", "gsn_text",
		"mask_lambert_conformal", "zonal_mpsi_Wrap", "advectGradient",
		"stringtoxxx", "gsn_add_shapefile_polymarkers", "set_labelbar_res",
		"dpres_sigma", "Path2KML", "l2_normb", "printVarInfo", "upperTriCntr",
		"wrf_overlays", "gsnp_uniform_tickmark_labels", "fill_bw_xy",
		"parse_date_ymd", "time_axis_labels", "l2_norma", "mjo_cross_plot",
		"area_global_rectilinear_grid", "get_allowed_lonnames", "is_SCRIP",
		"get_KML_IconHref", "fix_latlon2d_debug_info", "get_valid_units",
		"gsn_csm_xy3", "gsn_csm_xy2", "yyyymm_to_yyyyfrac", "ut_convert",
		"gsn_reverse_colormap", "check_grid_type", "get_res_eq_replace",
		"gsn_csm_streamline_map", "gsn_attach_plots", "copy_VarCoords_n",
		"ShadeGeLeContour", "gsn_contour_map", "fix_skewt_colormap_for_ncgm",
		"aam_local", "wrf_map_overlays", "get_overlay_plot",
		"eofunc_varimax_reorder", "wgt_runave_Wrap",
		"reset_device_coordinates", "check_SCRIP_vars", "print_header",
		"gsn_csm_x2y", "cat_strings", "fill_res", "add_lon_labels", "pdfx",
		"totypeof", "wkSpaceTime_cam", "sstLandFill", "gsn_open_pdf", "LOG2",
		"gsn_add_cyclic_point", "add_KML_Fill", "landsea_mask",
		"get_allowed_latnames", "unstructured_to_ESMF", "namedcolor2rgb",
		"gsn_vector_scalar", "plot_x2y2", "lonGlobeFo", "dim_avg_wgt_Wrap",
		"dim_sum_wgt_Wrap", "month_to_annual_weighted",
		"band_pass_area_time_plot", "wrf_mapres_c", "gsn_csm_vector_map_polar",
		"dim_standardize_Wrap", "table_attach_columns", "retrieve_SCRIP_lon",
		"is_valid_latlon_coord", "setColorContourClear", "f2fosh_Wrap",
		"f2gshv_Wrap", "f2fshv_Wrap", "smth13_n", "zeros",
		"ZeroLineContourThick", "gsn_csm_time_lat", "numeric2int", "clmMonLLT",
		"printMinMax", "rht_model", "mjo_elimIsolatedValues", "add_labelbar",
		"Point2KML", "ColorShadeLeGeContour", "svdHomHet2latlon",
		"retrieve_SCRIP_lat", "specx_ci", "skewT_PlotData_Panel",
		"gsn_add_text", "flt2dble", "eofcov_pcmsg_Wrap", "eofcor_pcmsg_Wrap",
		"pres2hybrid_Wrap", "copy_VarAtts", "GetAltModeNumber",
		"WRF_Times_to_ymdh", "clmMonTLL", "clmDayTLL", "IntegratePlevel",
		"get_valid_long_names", "latlon_to_SCRIP", "set_attr",
		"gsn_add_shapefile_polylines", "fill_xy_ref", "vr2uvG_Wrap",
		"vr2uvF_Wrap", "Open_KML_Document", "getSkewTColorIndex",
		"gsnp_shape_plot", "gsnp_scale_plot", "namDimCheck", "linint1_n_Wrap",
		"pattern_cor", "add_KML_TimeSpan", "maxrunlen", "gsn_csm_vector_map",
		"band_pass_area_time_plot_cam", "gsn_csm_vector_map_other",
		"reg_multlin_stats", "mjo_ApplyLanczosWgt_LeftDim", "genCmapManualRes",
		"TimeSourceStamp", "create_rmpPopFileName", "create_rotPopFileName",
		"latGau", "span_color_indexes", "region_ind", "get_src_grid_info",
		"get_dst_grid_info", "getLongName", "FixZeroContour", "get_cnLevels",
		"gsn_add_polygon", "yyyymmdd_to_yyyyddd", "yyyyddd_to_yyyymmdd",
		"yyyymmddhh2yyyyFrac", "area_conserve_remap_Wrap", "latGauWgt",
		"stdMonLLLT", "latRegWgt", "wrf_wps_dom",
		"monthly_total_to_daily_mean", "skewT_BackGround_Original",
		"calcMonAnomLLT", "mjo_wavenum_freq_season_plot",
		"wrf_user_list_times", "lonGM2DateLine", "wallClockElapseTime",
		"check_ESMF_vars", "read_ict", "energy_a", "plt_csm_xy_AddCyclicMonth",
		"wrf_vector", "gsn_csm_vector_scalar_map_polar",
		"gsn_csm_vector_scalar_map_other", "yyyymmdd_time",
		"set_title_resources", "xy_ref_interp", "wind_component", "stdMonTLLL",
		"retrieve_dstGrid_lat", "retrieve_srcGrid_lat", "gsn_panel",
		"numAsciiRow", "month_to_season12", "wrf_contour_ps", "wrf_vector_ps",
		"calcMonAnomTLL", "calcDayAnomTLL", "maxind_ind",
		"copy_VarCoords_not_n", "local_max_1d", "ind_nearest_coord",
		"merge_levels_sfc", "resolveWavesHayashi", "wr_GenBogusData",
		"is_valid_latlon2d_attr", "get_allowed_pres_units_pa",
		"get_allowed_pres_units_mb", "gsn_csm_streamline_map_ce",
		"yyyymmdd2yyyyFrac", "calc_SCRIP_corners_noboundaries",
		"mjo_xcor_lag_season", "wrf_user_getvar_from_files",
		"check_class_name", "gsn_csm_contour_map_polar",
		"gsn_csm_contour_map_other", "gsn_csm_vector_scalar_map",
		"spread_colors", "gsn_streamline_scalar_map", "wind_direction",
		"short2flt_hdf", "rankCheck", "linint2_points_Wrap", "runave_n_Wrap",
		"taper_leftdim", "rotate_latlon", "retrieve_dstGrid_lon",
		"retrieve_srcGrid_lon", "Open_KML_Folder", "WRF_Times2double_c",
		"gsn_contour", "get_valid_long_name_value", "is_tm_obj_valid",
		"get_flags", "get_plot_labelbar", "is_cairo_wks", "pop_tick_locs",
		"plot_x2y", "smthClmDayTLL", "readAsciiHead",
		"calculate_monthly_values", "regline_stats",
		"genCmapColorWheelInternal", "wrf_map", "isatt_logical_false",
		"band_pass_hovmueller_plot", "ShadeLtContour", "ShadeGtContour",
		"gsn_define_colormap", "outlined_bars", "gsn_geop_hgt", "dble2flt",
		"byte2flt", "calcMonStandardizeAnomTLL", "NewCosWeight",
		"numBinOneRuns", "vertint", "get_plot_not_loglin",
		"gsn_create_text_ndc", "gsn_merge_colormaps", "gsn_csm_contour_map",
		"copy_VarCoords_skipDim0", "rho_mwjf", "msgValOutline",
		"gsn_create_labelbar", "gsn_csm_zonal_means", "sort_xy",
		"get1Dindex_Collapse", "clmDayHr", "cssgrid_Wrap",
		"eofunc_varimax_Wrap", "squeeze", "add_KML_HideChildrenStyle",
		"WindRoseThickLineF", "maximize_plot", "get_allowed_lon_units",
		"dimnames_to_indexes", "merge_VarAtts", "eof_varimax_reorder",
		"run_cor", "dim_variance_n_Wrap", "linint1_Wrap", "linint2_Wrap",
		"get_display_mode", "get_contour_levels", "check_for_subtitles",
		"copy_VarAtts_except", "eofcov_Wrap", "eofcor_Wrap", "eofunc_Wrap",
		"print_elapsed_time", "clmMonTXXX", "genDispersionCurves",
		"check_for_lon_coord", "copy_VarCoords_2", "array_append_record",
		"infoTimeStamp", "gsn_open_ncgm", "gsn_primitive", "gsn_histogram",
		"copy_VarCoords_1", "Open_KML_Placemark", "band_pass_area_time",
		"get_resources", "attsetvalues_check", "find_cross_xy", "nameDim",
		"dim_variance_Wrap", "dim_stddev_n_Wrap", "grib_stime2COARDStime",
		"add_KML_Description", "add_KML_Coordinates", "add_KML_LinearRing",
		"get_res_value", "size_array", "short2flt", "eoftsData2eof", "lonFlip",
		"genNormalDist", "get_att_value", "skewT_BackGround", "wrf_wps_map",
		"isMonotonic", "pdfxy", "rectilinear_to_SCRIP", "copy_var_atts",
		"gsn_create_labelbar_ndc", "dim_rmsd_Wrap", "yyyymmddhh_time",
		"pattern_cor2", "create_canvas", "gsn_csm_streamline_map_polar",
		"int2flt", "dimWrapString", "clmMon2clmDay", "icObjAnal_2d",
		"cal_proleptic", "is_ESMF", "mjo_xcor_lag_plot_ovly", "cdnlp",
		"copy_CV_2_pop", "hsv2rgb", "decimalPlaces", "add_KML_West",
		"is_cairo_svg", "gsn_map", "add_subtitles", "isEqualSpace",
		"auto_to_SCRIP", "dim_dimsizes", "lonGlobeF", "add_KML_Range",
		"add_KML_Width", "add_KML_Color", "add_KML_North", "add_KML_South",
		"add_KML_Point", "Close_KML_Style", "is_cairo_pdf", "eofMeta",
		"epsZero", "ToHex", "add_KML_Address", "draw_bb", "add_KML_LatLonBox",
		"WRF_Times_to_udunits", "_SetMainTitle", "wrf_map_zoom",
		"scalar_field", "fill_xy2", "isatt_LongName", "copyatt", "closest_val",
		"dim_standardize_n_Wrap", "smth9_Wrap", "taper_Wrap", "crossp3",
		"shift_array", "WRF_Times_to_ymdhms", "gsn_contour_shade",
		"get1Dindex", "cat2Var", "Close_KML_Link", "decompose2SymAsym",
		"boxplot", "WRF_Times2Udunits_c", "gsnp_write_debug_info",
		"gsn_add_shapefile_text", "f2gsh_Wrap", "f2fsh_Wrap",
		"omega_ccm_driver", "mjo_wavenum_freq_season",
		"ShadeGeLeContourDensity", "PopLatLon", "gsn_polymarker",
		"partitionString", "relhum_ttd", "addTime", "Gray2cIndex",
		"band_pass_hovmueller", "gsn_polygon", "add_KML_Open",
		"gsn_vector_contour", "gsn_csm_map_other", "curvilinear_to_SCRIP",
		"maximize_bb", "check_for_coord_arrays", "svdAkBk2time",
		"obj_anal_ic_deprecated", "genCmapCnLvl", "genCmapLb", "WindRoseBasic",
		"WindRoseColor", "byte2flt_hdf", "GetFillColor",
		"generate_unique_indices", "add_KML_nSidedPolygon", "genCmapMnMxCnInt",
		"AdvectGradient", "get_bb_res", "dim_avg_wgt_n_Wrap",
		"dim_sum_wgt_n_Wrap", "rmMonAnnCycLLLT", "delete_attrs",
		"icObjAnal_1d", "get_allowed_pres_units", "SqrtCosWeight",
		"taper_n_Wrap", "stat_dispersion", "addHorVertLines", "mjo_xcor_lag",
		"add_white_space", "gsn_csm_contour_map_overlay", "ht_surface",
		"grad_rich_num_atm", "gsn_csm_vector_scalar_map_ce", "add_KML_Name",
		"add_KML_Visibility", "get1Dindex_Exclude", "transpose", "ones",
		"Open_KML_Link", "ShadeLtGtContour", "PotVortHybrid",
		"span_named_colors", "add_KML_Tessellate", "gsn_blank_plot",
		"gsn_draw_named_colors", "is_valid_coord", "extractAsciiRows",
		"mjo_spectra_season", "gsnp_turn_off_tickmarks", "hist_columns",
		"Collect_KMLs", "ESMF_copy_varcoords", "SHP2KML", "PotTemp",
		"gsnp_point_tickmarks_outward", "gsn_add_annotation",
		"gsn_shapefile_polylines", "trimBlankRight", "calcMonAnomLLLT",
		"symMinMaxPlt", "ESMF_regrid", "OpenKML", "gsn_vector_map",
		"span_color_rgba", "calendar_decode2", "Close_KML_Placemark",
		"get_res_eq", "gsn_open_cairo", "copy_VarMeta", "hide_KML_Children",
		"UnstructVelocity2KML", "gsn_open_x11", "set_right_subtitle",
		"add_KML_LineStyle", "add_KML_IconStyle", "add_KML_PolyStyle",
		"genCmapHueRangeInternal", "gsn_create_text", "gsn_streamline_contour",
		"triple2grid_Wrap", "retrieve_ESMF_lon", "create_rmpPopFileName2",
		"numAsciiCol", "latGlobeFo", "grib_stime2itime", "int2p_Wrap",
		"Open_KML_Style", "filled_bars", "timeCoads2YYYYMM", "check_attr",
		"get_valid_units_value", "add_latlon_labels", "gsn_csm_pres_hgt",
		"gsn_csm_pres_hgt_vector", "cshstringtolist", "calcMonAnomTLLL",
		"calcDayAnomTLLL", "g2gshv_Wrap", "g2fshv_Wrap",
		"add_KML_OuterBoundaryIs", "add_KML_InnerBoundaryIs",
		"ColorNegDashZeroPosContour", "smooth93d", "get_allowed_lat_units",
		"pie_chart", "WRF_resLamCon_c", "addfiles_GetVar", "gsn_open_image",
		"hyi2hyo_Wrap", "w_to_omega", "retrieve_ESMF_lat", "FILWGTS",
		"get_res_value_keep", "namelist", "replaceSingleChar",
		"ESMF_regrid_gen_weights", "gsn_open_ps", "gsn_labelbar_ndc",
		"add_lat_labels_xaxis", "add_lat_labels_yaxis", "getVarDimNames",
		"gsn_csm_vector", "calcMonAnomTXXX", "gsn_csm_pres_hgt_streamline",
		"mjo_phase_background", "tofloat_wunits", "gsn_add_shapefile_polygons",
		"gsn_csm_attach_zonal_means", "obj_anal_ic_Wrap", "runave_Wrap",
		"isLatorLon", "rmAnnCycle1D", "wrf_user_latlon_to_ij",
		"get_allowed_pres_units_hpa", "yyyymmdd_to_yyyyfrac",
		"apply_dtrend_LeftDim", "pop_latlon_grid", "add_KML_Extrude",
		"add_KML_AltMode", "replaceChars", "pot_vort_hybrid", "circle_ll",
		"wrf_user_unstagger", "lower_case", "latGlobeF", "modCheck",
		"Measurements2KML", "nchoosek", "copy_VA_pop", "wgt_runave_n_Wrap",
		"kf_filter", "compute_device_coords", "PopLatLon2D", "PopLatLonV",
		"skewT_BackGround_Panel", "WRF_map_c", "print_opts", "gsn_csm_xy",
		"eofTsMeta", "smooth92d", "add_latlon2d_debug_info",
		"check_for_y_lat_coord", "check_for_x_lat_coord", "sigma_interface",
		"gsn_csm_x2y2", "GetFillColorIndex", "table_attach_rows",
		"print_clock", "is_cairo_png", "gsn_streamline", "gsn_csm_map_ce",
		"yyyymmddhh_to_yyyyfrac", "local_min_1d", "get_start_time",
		"add_KML_Rotation", "ut_string", "SPECXY_ANAL", "gsn_add_polymarker",
		"read_colormap_file", "lonPivot", "check_ESMF_dims", "gsn_legend_ndc",
		"get_rgb_values", "get_bar_widths", "get_lon_values", "get_lat_values",
		"get_lon_labels", "get_lat_labels", "plot_xy3", "addHorVertLinesCross",
		"WindRoseThickLine", "gsn_vector_contour_map", "plot_xy2", "zonalAve",
		"month_name", "wrf_user_getvar", "get_color_rgba", "time_to_newtime",
		"mjo_xcor_lag_ovly_panel", "eofcov_ts_Wrap", "eofcor_ts_Wrap",
		"eofunc_ts_Wrap", "rm_single_dims", "add_KML_East", "fo2fshv_Wrap",
		"add_KML_ColorMapStyles", "skewT_PlotData", "gsn_csm_y", "rmInsufData",
		"skewT_PlotData_Original", "gsn_csm_blank_plot", "maximize_output",
		"set_pres_hgt_axes", "RGBtoCmap", "check_both_atts",
		"add_KML_StyleUrl", "cd_string", "overlay_irregular",
		"gsn_csm_vector_map_ce", "totype", "wgt_areaave_Wrap",
		"get_non_missing_pairs", "isatt_logical_true", "SPECX_ANAL",
		"wrf_overlay", "dim_rmvmean_Wrap", "ZeroNegDashLineContour",
		"write_lines", "get_polar_type", "dim_rmvmed_Wrap", "dim_cumsum_Wrap",
		"gsn_polymarker_ndc", "add_KML_TimeStamp_When",
		"Close_KML_NetworkLink", "statAsymSym", "genCmapMnMxSpan",
		"wgt_runave_leftdim", "add_KML_Polygon", "add90LatY",
		"set_zero_line_thickness", "is_data_1d_or_2d", "changeCase",
		"stdMonLLT", "add90LatX", "getFillValue", "check_for_irreg2loglin",
		"month_to_season", "gsn_polyline_ndc", "vector_field", "flt2string",
		"add_KML_FlyToView", "ZeroLineContour", "gsn_y", "fo2fsh_Wrap",
		"dtrend_leftdim", "write_wrf_debug_script", "gsn_coordinates",
		"gsn_csm_streamline", "ocean_mask", "genCmapNameCol",
		"POPlonReorderGM", "wrf_contour", "set_line_thickness_scale",
		"gsn_csm_contour", "pack_values", "isConstantSpace",
		"wrf_user_ij_to_ll", "dim_rmvmed_n_Wrap", "dim_cumsum_n_Wrap",
		"dpres_plevel_Wrap", "check_SCRIP_dims", "wrf_map_resources",
		"stdMonTLL", "mon_fullyear", "histY", "write_wrf_debug_info",
		"is_cairo_eps", "set_left_subtitle", "mod", "histX", "advect_gradient",
		"dim_avg_Wrap", "dim_sum_Wrap", "area_hi2lores_Wrap", "gsn_table",
		"set_axis_string", "gsn_csm_vector_scalar", "FixZeroContourEps",
		"SetZeroLineThickness", "namedcolor2rgba", "check_for_tickmarks_off",
		"set_subtitles_res", "natgrid_Wrap", "oht_model", "oft_model",
		"PopLatLon2", "get_long_name_units_string", "gsn_retrieve_colormap",
		"gsn_vector_scalar_map", "uv2dvF_Wrap", "uv2dvG_Wrap", "uv2vrF_Wrap",
		"uv2vrG_Wrap", "copy_VarCoords", "wave_number_spc", "indStrSubset",
		"set_pos_neg_line_pattern", "pdfx_v510", "ESMF_copy_varmeta",
		"rmvAnnualCycle", "ZeroGoneNegDashLineContour", "NormCosWgtGlobe",
		"rmMonAnnCycLLT", "dim_avg_n_Wrap", "dim_sum_n_Wrap", "dim_min_n_Wrap",
		"dim_max_n_Wrap", "month_to_seasonN", "msrcp_mss2local",
		"month_to_annual", "Close_KML_Folder", "gsn_create_legend",
		"omega_to_w", "FixZeroContour_HALEY", "ShadeCOI", "set_cn_resources",
		"set_lb_resources", "set_vc_resources", "set_mp_resources",
		"getVarFillValue", "calc_day_values", "rcm2rgrid_Wrap",
		"rgrid2rcm_Wrap", "area_polar_region", "area_earth_region",
		"wrf_times_c", "fix_labelbar", "stat_mode", "Velocity2KML",
		"wrf_map_overlay", "gsn_xy", "clmMonLLLT", "add_KML_Heading",
		"gsn_create_legend_ndc", "PopCoord", "rmMonAnnCycTLL",
		"add_KML_Outline", "Points2KML", "wrf_user_intrp3d",
		"latLon2Pop_LinearIntS", "add_map_tickmarks", "get_file_suffix",
		"StaticStability", "skewty", "gsn_vector", "calculate_zonal_means",
		"calc_SCRIP_corners_boundaries", "plt_pdfxy", "PotVortIsobaric",
		"preRotate_PopLatLon2D", "skewtx", "draw_and_frame", "ref_line_interp",
		"niceLatLon2D", "Close_KML_Document", "set_mp_wrf_map_resources",
		"gsn_add_polyline", "yyyymm2yyyyFrac", "season_name",
		"ZeroNegDashLineContourOverlay", "clmMonTLLL", "clmDayTLLL",
		"wrf_user_set_xy", "component_copy_VarCoords", "readAsciiTable",
		"get_csm_long_name_units_string", "cd_convert", "get_res_ne",
		"f2foshv_Wrap", "assignFillValue", "isStrSubset", "specxy_ci",
		"write_grid_description_file", "RasterTimeSeries2KML", "gsn_csm_hov",
		"dim_rmvmean_n_Wrap", "UnstructGrid2KML", "UnstructData2KML",
		"wkSpaceTime", "write_latlon2d_lines", "thetaHybrid",
		"gsn_polygon_ndc", "gsn_draw_colormap", "getind_latlon2d", "mjo_cross",
		"yyyymm_time", "get_coordinate_system_string", "postRotate_PopLatLon2D" ];
  CodeMirror.registerHelper("hintWords", "python", commonKeywords.concat(commonBuiltins));

  function top(state) {
    return state.scopes[state.scopes.length - 1];
  }

  CodeMirror.defineMode("python", function(conf, parserConf) {
    var ERRORCLASS = "error";

    var singleDelimiters = parserConf.singleDelimiters || /^[\(\)\[\]\{\}@,:`=;\.]/;
    var doubleOperators = parserConf.doubleOperators || /^([!<>]==|<>|<<|>>|\/\/|\*\*)/;
    var doubleDelimiters = parserConf.doubleDelimiters || /^(\+=|\-=|\*=|%=|\/=|&=|\|=|\^=)/;
    var tripleDelimiters = parserConf.tripleDelimiters || /^(\/\/=|>>=|<<=|\*\*=)/;

    var hangingIndent = parserConf.hangingIndent || conf.indentUnit;

    var myKeywords = commonKeywords, myBuiltins = commonBuiltins;
    if (parserConf.extra_keywords != undefined)
      myKeywords = myKeywords.concat(parserConf.extra_keywords);

    if (parserConf.extra_builtins != undefined)
      myBuiltins = myBuiltins.concat(parserConf.extra_builtins);

    var py3 = !(parserConf.version && Number(parserConf.version) < 3)
    if (py3) {
      // since http://legacy.python.org/dev/peps/pep-0465/ @ is also an operator
      var singleOperators = parserConf.singleOperators || /^[\+\-\*\/%&|\^~<>!@]/;
      var identifiers = parserConf.identifiers|| /^[_A-Za-z\u00A1-\uFFFF][_A-Za-z0-9\u00A1-\uFFFF]*/;
      myKeywords = myKeywords.concat(["nonlocal", "False", "True", "None", "async", "await"]);
      myBuiltins = myBuiltins.concat(["ascii", "bytes", "exec", "print"]);
      var stringPrefixes = new RegExp("^(([rbuf]|(br))?('{3}|\"{3}|['\"]))", "i");
    } else {
      var singleOperators = parserConf.singleOperators || /^[\+\-\*\/%&|\^~<>!]/;
      var identifiers = parserConf.identifiers|| /^[_A-Za-z][_A-Za-z0-9]*/;
      myKeywords = myKeywords.concat(["exec", "print"]);
      myBuiltins = myBuiltins.concat(["apply", "basestring", "buffer", "cmp", "coerce", "execfile",
                                      "file", "intern", "long", "raw_input", "reduce", "reload",
                                      "unichr", "unicode", "xrange", "False", "True", "None"]);
      var stringPrefixes = new RegExp("^(([rubf]|(ur)|(br))?('{3}|\"{3}|['\"]))", "i");
    }
    var keywords = wordRegexp(myKeywords);
    var builtins = wordRegexp(myBuiltins);

    // tokenizers
    function tokenBase(stream, state) {
      if (stream.sol()) state.indent = stream.indentation()
      // Handle scope changes
      if (stream.sol() && top(state).type == "py") {
        var scopeOffset = top(state).offset;
        if (stream.eatSpace()) {
          var lineOffset = stream.indentation();
          if (lineOffset > scopeOffset)
            pushPyScope(state);
          else if (lineOffset < scopeOffset && dedent(stream, state) && stream.peek() != "#")
            state.errorToken = true;
          return null;
        } else {
          var style = tokenBaseInner(stream, state);
          if (scopeOffset > 0 && dedent(stream, state))
            style += " " + ERRORCLASS;
          return style;
        }
      }
      return tokenBaseInner(stream, state);
    }

    function tokenBaseInner(stream, state) {
      if (stream.eatSpace()) return null;

      var ch = stream.peek();

      // Handle Comments
      if (ch == "#") {
        stream.skipToEnd();
        return "comment";
      }

      // Handle Number Literals
      if (stream.match(/^[0-9\.]/, false)) {
        var floatLiteral = false;
        // Floats
        if (stream.match(/^[\d_]*\.\d+(e[\+\-]?\d+)?/i)) { floatLiteral = true; }
        if (stream.match(/^[\d_]+\.\d*/)) { floatLiteral = true; }
        if (stream.match(/^\.\d+/)) { floatLiteral = true; }
        if (floatLiteral) {
          // Float literals may be "imaginary"
          stream.eat(/J/i);
          return "number";
        }
        // Integers
        var intLiteral = false;
        // Hex
        if (stream.match(/^0x[0-9a-f_]+/i)) intLiteral = true;
        // Binary
        if (stream.match(/^0b[01_]+/i)) intLiteral = true;
        // Octal
        if (stream.match(/^0o[0-7_]+/i)) intLiteral = true;
        // Decimal
        if (stream.match(/^[1-9][\d_]*(e[\+\-]?[\d_]+)?/)) {
          // Decimal literals may be "imaginary"
          stream.eat(/J/i);
          // TODO - Can you have imaginary longs?
          intLiteral = true;
        }
        // Zero by itself with no other piece of number.
        if (stream.match(/^0(?![\dx])/i)) intLiteral = true;
        if (intLiteral) {
          // Integer literals may be "long"
          stream.eat(/L/i);
          return "number";
        }
      }

      // Handle Strings
      if (stream.match(stringPrefixes)) {
        state.tokenize = tokenStringFactory(stream.current());
        return state.tokenize(stream, state);
      }

      // Handle operators and Delimiters
      if (stream.match(tripleDelimiters) || stream.match(doubleDelimiters))
        return "punctuation";

      if (stream.match(doubleOperators) || stream.match(singleOperators))
        return "operator";

      if (stream.match(singleDelimiters))
        return "punctuation";

      if (state.lastToken == "." && stream.match(identifiers))
        return "property";

      if (stream.match(keywords) || stream.match(wordOperators))
        return "keyword";

      if (stream.match(builtins))
        return "builtin";

      if (stream.match(/^(self|cls)\b/))
        return "variable-2";

      if (stream.match(identifiers)) {
        if (state.lastToken == "def" || state.lastToken == "class")
          return "def";
        return "variable";
      }

      // Handle non-detected items
      stream.next();
      return ERRORCLASS;
    }

    function tokenStringFactory(delimiter) {
      while ("rubf".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)
        delimiter = delimiter.substr(1);

      var singleline = delimiter.length == 1;
      var OUTCLASS = "string";

      function tokenString(stream, state) {
        while (!stream.eol()) {
          stream.eatWhile(/[^'"\\]/);
          if (stream.eat("\\")) {
            stream.next();
            if (singleline && stream.eol())
              return OUTCLASS;
          } else if (stream.match(delimiter)) {
            state.tokenize = tokenBase;
            return OUTCLASS;
          } else {
            stream.eat(/['"]/);
          }
        }
        if (singleline) {
          if (parserConf.singleLineStringErrors)
            return ERRORCLASS;
          else
            state.tokenize = tokenBase;
        }
        return OUTCLASS;
      }
      tokenString.isString = true;
      return tokenString;
    }

    function pushPyScope(state) {
      while (top(state).type != "py") state.scopes.pop()
      state.scopes.push({offset: top(state).offset + conf.indentUnit,
                         type: "py",
                         align: null})
    }

    function pushBracketScope(stream, state, type) {
      var align = stream.match(/^([\s\[\{\(]|#.*)*$/, false) ? null : stream.column() + 1
      state.scopes.push({offset: state.indent + hangingIndent,
                         type: type,
                         align: align})
    }

    function dedent(stream, state) {
      var indented = stream.indentation();
      while (state.scopes.length > 1 && top(state).offset > indented) {
        if (top(state).type != "py") return true;
        state.scopes.pop();
      }
      return top(state).offset != indented;
    }

    function tokenLexer(stream, state) {
      if (stream.sol()) state.beginningOfLine = true;

      var style = state.tokenize(stream, state);
      var current = stream.current();

      // Handle decorators
      if (state.beginningOfLine && current == "@")
        return stream.match(identifiers, false) ? "meta" : py3 ? "operator" : ERRORCLASS;

      if (/\S/.test(current)) state.beginningOfLine = false;

      if ((style == "variable" || style == "builtin")
          && state.lastToken == "meta")
        style = "meta";

      // Handle scope changes.
      if (current == "pass" || current == "return")
        state.dedent += 1;

      if (current == "lambda") state.lambda = true;
      if (current == ":" && !state.lambda && top(state).type == "py")
        pushPyScope(state);

      var delimiter_index = current.length == 1 ? "[({".indexOf(current) : -1;
      if (delimiter_index != -1)
        pushBracketScope(stream, state, "])}".slice(delimiter_index, delimiter_index+1));

      delimiter_index = "])}".indexOf(current);
      if (delimiter_index != -1) {
        if (top(state).type == current) state.indent = state.scopes.pop().offset - hangingIndent
        else return ERRORCLASS;
      }
      if (state.dedent > 0 && stream.eol() && top(state).type == "py") {
        if (state.scopes.length > 1) state.scopes.pop();
        state.dedent -= 1;
      }

      return style;
    }

    var external = {
      startState: function(basecolumn) {
        return {
          tokenize: tokenBase,
          scopes: [{offset: basecolumn || 0, type: "py", align: null}],
          indent: basecolumn || 0,
          lastToken: null,
          lambda: false,
          dedent: 0
        };
      },

      token: function(stream, state) {
        var addErr = state.errorToken;
        if (addErr) state.errorToken = false;
        var style = tokenLexer(stream, state);

        if (style && style != "comment")
          state.lastToken = (style == "keyword" || style == "punctuation") ? stream.current() : style;
        if (style == "punctuation") style = null;

        if (stream.eol() && state.lambda)
          state.lambda = false;
        return addErr ? style + " " + ERRORCLASS : style;
      },

      indent: function(state, textAfter) {
        if (state.tokenize != tokenBase)
          return state.tokenize.isString ? CodeMirror.Pass : 0;

        var scope = top(state), closing = scope.type == textAfter.charAt(0)
        if (scope.align != null)
          return scope.align - (closing ? 1 : 0)
        else
          return scope.offset - (closing ? hangingIndent : 0)
      },

      electricInput: /^\s*[\}\]\)]$/,
      closeBrackets: {triples: "'\""},
      lineComment: "#",
      fold: "indent"
    };
    return external;
  });

  CodeMirror.defineMIME("text/x-python", "python");

  var words = function(str) { return str.split(" "); };

  CodeMirror.defineMIME("text/x-cython", {
    name: "python",
    extra_keywords: words("by cdef cimport cpdef ctypedef enum except"+
                          "extern gil include nogil property public"+
                          "readonly struct union DEF IF ELIF ELSE")
  });

});
